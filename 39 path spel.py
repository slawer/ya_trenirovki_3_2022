

"""

https://contest.yandex.ru/contest/45468/problems/39

39. Путь спелеолога
Ограничение времени	1 секунда
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Пещера представлена кубом, разбитым на N частей по каждому измерению (то есть на N3 кубических клеток).
 Каждая клетка может быть или пустой, или полностью заполненной камнем. Исходя из положения спелеолога в пещере,
  требуется найти, какое минимальное количество перемещений по клеткам ему требуется, чтобы выбраться на поверхность.
   Переходить из клетки в клетку можно, только если они обе свободны и имеют общую грань.

Формат ввода
В первой строке содержится число N (1 ≤ N ≤ 30). Далее следует N блоков. Блок состоит из пустой строки и N строк по
 N символов: # - обозначает клетку, заполненную камнями, точка - свободную клетку. Начальное положение спелеолога
  обозначено заглавной буквой S. Первый блок представляет верхний уровень пещеры, достижение любой свободной его
  клетки означает выход на поверхность. Выход на поверхность всегда возможен.

Формат вывода
Вывести одно число - длину пути до поверхности.
"""

from collections import defaultdict


n = [int(e) for e in input().split()][0]

mm = 10**10
m = [[]]
a, b, c = -1, -1, -1
for i in range(n):
    m.append([])
    if input():
        print('err input!')
    for j in range(n):
        m[i].append([])
        t = input()
        for x, s in enumerate(t):
            m[i][j].append(-1 if s == '#' else mm)
            if s == 'S':
                a, b, c = i, j, x

s = []
for i in range(n):
    for j in range(n):
        if m[0][i][j] == mm:
            m[0][i][j] = 0
            s.append((0, i, j))


def bfs(n):

    while s:
        x, y, z = s.pop(0)
        dst = m[x][y][z]

        # сформировать соседенйи вверх вних и стороны
        t = []
        if x > 0:
            t.append((x-1,y,z))
        if x < n - 1:
            t.append((x+1, y, z))
        if y > 0:
            t.append((x, y-1, z))
        if y < n - 1:
            t.append((x, y+1, z))
        if z > 0:
            t.append((x, y, z-1))
        if z < n - 1:
            t.append((x, y, z+1))

        for q, w, e in t:
            if m[q][w][e] == -1:
                continue

            if m[q][w][e] != mm:
                continue

            m[q][w][e] = dst + 1
            s.append((q, w, e))

bfs(n)

print(m[a][b][c])


for u in m:
    for s in u:
        pass
        #print(s)
    # print()

# print(a, b, c)
