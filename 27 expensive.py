

"""

https://contest.yandex.ru/contest/45468/problems/27

27. Вывести маршрут максимальной стоимости
Ограничение времени	1 секунда
Ограничение памяти	256Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
В левом верхнем углу прямоугольной таблицы размером
N
×
M
 находится черепашка. В каждой клетке таблицы записано некоторое число. Черепашка может перемещаться вправо или вниз,
 при этом маршрут черепашки заканчивается в правом нижнем углу таблицы.
Подсчитаем сумму чисел, записанных в клетках, через которую проползла черепашка (включая начальную и конечную клетку).
Найдите наибольшее возможное значение этой суммы и маршрут, на котором достигается эта сумма.

Формат ввода
В первой строке входных данных записаны два натуральных числа N и M, не превосходящих 100 — размеры таблицы.
Далее идет N строк, каждая из которых содержит M чисел, разделенных пробелами — описание таблицы. Все числа в клетках
таблицы целые и могут принимать значения от 0 до 100.
Формат вывода
Первая строка выходных данных содержит максимальную возможную сумму, вторая — маршрут, на котором достигается эта сумма.
Маршрут выводится в виде последовательности, которая должна содержать N-1 букву D, означающую передвижение вниз
и M-1 букву R, означающую передвижение направо. Если таких последовательностей несколько, необходимо вывести ровно
одну (любую) из них.
Пример
Ввод	Вывод
5 5
9 9 9 9 9
3 0 0 0 0
9 9 9 9 9
6 6 6 6 8
9 9 9 9 9

"""


n, m = [int(e) for e in input().split()]

l = [[-1 for _ in range(m)] for _ in range(n)]
dp = [[-1 for _ in range(m)] for _ in range(n)]

for i in range(n):
    t = input().split()
    for j in range(m):
        l[i][j] = int(t[j])
        dp[i][j] = -1

dp[0][0] = l[0][0]

s = [(0, 0)]

while s:
    i, j = s.pop(0)
    if i + 1 < n and (i+1, j) not in s:
        s.append((i+1, j))
    if j + 1 < m and (i, j+1) not in s:
        s.append((i, j+1))
    if dp[i][j] != -1:
        continue
    t = []
    if i - 1 >= 0:
        if dp[i-1][j] != -1:
            t.append(dp[i-1][j])
        elif (i, j) not in s:
            s.append((i, j))
            continue
    if j - 1 >= 0:
        if dp[i][j-1] != -1:
            t.append(dp[i][j-1])
        elif (i, j) not in s:
            s.append((i, j))
            continue
    if not t:
        continue
    dp[i][j] = max(t) + l[i][j]
    # print(i, j, t, l[i][j], dp[i][j])

print(dp[n-1][m-1])

t = []
i, j = n-1, m-1
#print(i, j)
while i > 0 or j > 0:
    p = []
    #print(i, j)
    if i - 1 >= 0:
        p.append(dp[i-1][j])
    else:
        t.append('R')
        j -= 1
        continue
    if j - 1 >= 0:
        p.append(dp[i][j-1])
    else:
        t.append('D')
        i -= 1
        continue

    if not p:
        break

    if p[0] > p[1]:
        i -= 1
        t.append('D')
        continue

    j -= 1
    t.append('R')

print(" ".join(t[::-1]))







print()
for i in range(n):
    for j in range(m):
        print(dp[i][j], end=' ')
    print()

