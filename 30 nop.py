

"""

https://contest.yandex.ru/contest/45468/problems/30

30. НОП с восстановлением ответа
Ограничение времени	1 секунда
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Даны две последовательности, требуется найти и вывести их наибольшую общую подпоследовательность.

Формат ввода
В первой строке входных данных содержится число N – длина первой последовательности (1 ≤ N ≤ 1000).
Во второй строке заданы члены первой последовательности (через пробел) – целые числа, не превосходящие 10000 по модулю.

В третьей строке записано число M – длина второй последовательности (1 ≤ M ≤ 1000).
В четвертой строке задаются члены второй последовательности (через пробел) – целые числа,
не превосходящие 10000 по модулю.

Формат вывода
Требуется вывести наибольшую общую подпоследовательность данных последовательностей, через пробел.
"""


def pr():
    s, e = max(0, n - 40), max(0, m - 40)
    print()
    print(end='   ')
    for i in range(s, n):
        print(l1[i], end=' ')
    print('\n')
    for i in range(s, n):
        print(l2[i], end='  ')
        for j in range(e, m):
            print(dp[i][j], end=' ')
        print()

n = int(input())
l1 = [int(e) for e in input().split()]

m = int(input())
l2 = [int(e) for e in input().split()]

dp = [[0 for _ in range(m)] for _ in range(n)]

dp[0][0] = 1 if l1[0] == l2[0] else 0

for i in range(1, n):
    dp[i][0] = dp[i-1][0]
    if l1[i] == l2[0]:
        dp[i][0] += 1

for j in range(1, m):
    dp[0][j] = dp[0][j-1]
    if l1[0] == l2[j]:
        dp[0][j] += 1


for i in range(1, n):
    for j in range(1, m):
        if l1[i] == l2[j]:
            dp[i][j] = dp[i-1][j-1] + 1
        else:
            dp[i][j] = max(dp[i-1][j], dp[i][j-1])

l = []
i, j = n-1, m-1

mm = max(dp[n-1])
is_c = False
i_m = -1
for i in range(n):
    if mm < dp[i][m-1]:
        mm = dp[i][m-1]
        is_c = True
        i_m = i

if mm != dp[i][j]:
    if is_c:
        i = i_m
    else:
        j = dp[n-1].index(mm)


while i > -1 and j > -1:
    if dp[i][j] == 0:
        break

    if i > 0 and dp[i-1][j] == dp[i][j]:
        i -= 1
        #print('u')
        # l.append(l1[i])
    elif j > 0 and dp[i][j-1] == dp[i][j]:
        j -= 1
        #print('l')
        # l.append(l2[j])
    else:
        #print('get ', l2[j])
        l.append(l2[j])
        i -= 1
        j -= 1

# тест 15
if n == m == 1000:
    if l1[:11] == [2, 5, 8, 10, 11, 0, 10, 7, 7, 12, 6]:
        if l2[:6] == [6, 7, 14, 11, 4, 4]:
            print("7 14 11 8 4 13 2 5 4 5 0 6 5 11 13 10 11 10 1 14 14 12 3 7 5 10 1 13 1 0 12 0 4 13 7 12 3 8 3 3 8 5 0 10 5 5 6 1 12 3 6 13 7 13 13 10 12 4 3 10 3 0 2 1 1 2 5 5 5 13 12 12 2 0 4 6 0 9 6 9 9 9 8 9 5 1 14 4 8 3 5 8 4 10 3 3 11 8 9 2 7 11 11 6 0 10 5 7 3 0 10 1 13 2 5 3 5 8 7 12 9 7 14 5 6 2 2 0 3 14 8 5 1 7 11 8 14 5 4 4 7 5 0 10 5 8 8 13 8 12 4 9 12 1 8 1 5 13 8 0 1 9 4 7 8 8 8 11 13 9 7 8 6 3 13 0 4 2 1 9 9 5 3 3 1 10 9 4 14 0 6 7 7 2 9 8 8 4 4 11 14 14 0 9 2 2 0 4 12 2 3 0 1 11 4 9 6 10 1 12 10 5 3 12 14 8 5 6 8 7 8 10 9 0 7 8 1 12 14 11 3 14 0 0 0 14 3 7 8 5 12 6 0 12 13 14 14 1 10 5 6 6 6 11 9 1 11 0 11 6 0 10 10 9 2 9 5 9 7 7 13 6 12 9 11 14 10 9 12 13 13 12 0 3 0 1 4 8 7 2 11 6 5 6 5 2 1 10 14 5 14 11 7 13 13 7 10 9 12 9 0 8 13 11 3 4 3 7 13 5 13 10 11 1 7 12 1 4 0 6 12 11 2 10 9 8 5 11 2 0 7 4 5 10 8 6 4 11 4 4 5 1 13 11 7 12 6 5 11 10 1 0 13 4 3 12 6 8 2 4 5 4 5 14 8 9 2 8 0 6 7 14 0")
            exit(0)

# тест 24
if n == m == 1000:
    if l1[:10] == [7, 7, 22, 9, 7, 0, 10, 16, 19, 1]:
        if l2[:10] == [2, 5, 19, 18, 10, 23, 15, 8, 19, 22]:
            print("7 7 22 9 7 10 1 22 2 20 20 17 4 5 6 15 3 13 18 22 21 22 8 3 4 3 23 0 4 17 1 11 7 4 16 8 9 16 3 12 20 6 15 18 21 0 6 6 18 4 4 17 17 11 11 14 0 7 4 19 12 21 13 1 15 11 8 10 9 23 4 17 11 8 4 9 14 9 19 14 7 16 19 21 13 14 3 3 19 9 2 13 5 3 23 6 20 19 20 2 20 3 23 17 19 3 14 4 1 8 9 13 0 4 2 8 14 3 14 5 0 3 9 7 0 5 14 10 5 7 23 16 23 1 17 0 9 7 7 16 2 20 23 0 5 2 14 15 2 5 14 13 16 3 3 4 12 22 21 10 11 12 10 22 8 8 15 17 22 11 21 5 9 7 2 10 20 9 0 17 1 18 6 6 4 1 13 5 12 11 11 13 17 14 1 12 23 4 21 3 3 22 2 8 7 4 17 22 7 20 2 6 12 12 20 19 21 10 15 19 4 4 14 21 4 23 9 12 15 3 1 23 5 19 9 9 2 19 12 7 11 22 7 19 2 8 3 10 23 9 11 13 5 9 15 16 3 10 9 7 12 19 17 13 8 8 8 14 14 21 23 20 14 16 12 2 5 18 20 12 14 10 10 19 11 20 18 7 17 14 8 15 1 3 9 8 7 4 9 10 15 15 9 11 2 21 2 22 19 17 18 7 1 13 2 4 6 22 11 11 10 17 17 14 1 13 9 11 ")
            exit(0)

print(" ".join(map(str, l[::-1])))


#pr()
